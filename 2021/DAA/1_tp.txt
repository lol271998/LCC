1º Teste Prático


1E - Greedy e Ordenação

/---------------------------------------------------------/
Classe para Pares

class Pair implements Comparable<Pair>{
		public int first;
		public int last;
	   
	   	Pair(int f, int l) {
	    	first = f;
	    	last = l;
	   	}

   		@Override
		public int compareTo(Pair p){
			if(first>p.first) return +1;
			if(first<p.first) return -1;
			else return 0;
		}

   		public String toString() {
   		   return "(" + first + "," + last + ")";
   		}
	}

/---------------------------------------------------------/

[DAA 009] ADN alienígena

class Dna implements Comparable<Dna> {
	public char letra;
	public int occ;
	public int freq;

	Dna(char l, int o, int f){
		letra = l;
		occ = o;
		freq = f;
	}

	@Override
	public int compareTo(Dna d){
		if(occ<d.occ) return +1;
		if(occ>d.occ) return -1;
		else{
			if(freq<d.freq) return -1;
			if(freq>d.freq) return +1;
		}
		return 0;
	}
}

public class daa009{
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		String line = in.nextLine();
		Dna d[] = new Dna [26];

		int n = line.length();
		char ch = 'A';
		for(int i = 0; i<26; i++){
			d[i] = new Dna(ch,0,-1);
			ch++;
		}

		for(int i = 0; i<n; i++){
			d[line.charAt(i)-'A'].occ++;
			//System.out.println(line.charAt(i)+": "+d[line.charAt(i)-'A'].occ);
			if(d[line.charAt(i)-'A'].freq == -1) d[line.charAt(i)-'A'].freq = i;
		}

		//System.out.println("");

		Arrays.sort(d);

		for(int i = 0; i<26; i++){
			if(d[i].occ>0) System.out.println(d[i].letra + " " + d[i].occ);
		}
	}
}

/---------------------------------------------------------/

[DAA 013] Cobertura mínima 

public class daa013{

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);

		int m = in.nextInt();
  
		int np = in.nextInt();

		Pair[] s = new Pair[np];
		
		for(int i = 0; i<np; i++){
			Pair p = new Pair(in.nextInt(),in.nextInt());
			s[i] = p;
			//System.out.println(p);
		}

		Arrays.sort(s);

		int end = 0, i = 0, count = 0;

		while(end<m){
			if(s[i].first<=end){
				//System.out.println("s["+i+"]: "+s[i]);
				int j = i+1;
				int tmp = s[i].last;
				while(j<np && s[j].first<=end){
					if(tmp<s[j].last){
						tmp = s[j].last;
					}
					j++;
				}
				end = tmp;
				count++;
			}
			i++;
		}

		System.out.println(count);
	}
}

/---------------------------------------------------------/

DAA 014 - Problema do Sapateiro (Ver Critério de ordenação)

class daa014{
	public static void main(String[] args) {

		Scanner in = new Scanner(System.in);

		int n = in.nextInt();
		
		Pair[] l = new Pair[n];

		for(int i = 0; i<n; i++){
			
			int d = in.nextInt();
			int m = in.nextInt();
			double r = ((d*1.0)/(m*1.0));
			
			Pair p = new Pair(i+1,r);

			l[i] = p;
		}

		Arrays.sort(l);

		for(int i = 0; i<n; i++){
			if(i == n-1) System.out.println(l[i].day);
			else System.out.print(l[i].day+" ");
		}
	}
}

/---------------------------------------------------------/
/---------------------------------------------------------/

2E - Pesquisa Binária

Pesquisa Binária

bsearch(v, low, high, key){
	
	while (low ≤ high ){
		middle = low + (high − low)/2;
		if(key = v[middle]) return (middle);
		else if(key<v[middle]) high = middle - 1;
		else low = middle + 1;
	}

	return -1
}

Pesquisa Binária para condição

bsearch(low,high,cond){
	while(low < high){
		middle = low + (high-low)/2;
		if(cond(middle)){
			high = middle;
			low = middle + 1;
		}
		if(!cond(low)) return -1;
	}
	return low;
}

/---------------------------------------------------------/

[DAA 010] Somas mais próximas

public class daa010{

    public static int binarysearch(int[] v, int low, int high, int key){
        
        if(key>v[high]) return high;
        if(key<v[low]) return low;
        
        while(low < high){

            int middle = low + (high-low)/2;

            /*
            System.out.println("Key: "+key);
            System.out.println("low: v["+low+"]: "+v[low]);
            System.out.println("middle: v["+middle+"]: "+v[middle]);
            System.out.println("high: v["+high+"]: "+v[high]);
            System.out.println("--------------------------------");
			*/
            /*
            if(key-v[middle] == v[middle+1]-key){
                System.out.print(v[middle]+" ");
                low = middle + 1;
                return low;
            }*/

            if(key<v[middle]){
                if(key>v[middle-1]){
                    if(key-v[middle-1] == v[middle]-key){
                        System.out.print(v[middle-1]+" ");
                        return middle;
                    }
                    if(key-v[middle-1]<v[middle]-key){
                        return middle-1;
                    }
                    else if(key-v[middle-1]>v[middle]-key){
                        return middle;
                    }
                }
                high = middle;
            }
            else if(key>v[middle]){
                if(key<v[middle+1]){
                    if(key-v[middle] == v[middle+1]-key){
                        System.out.print(v[middle]+" ");
                        return middle+1;
                    }
                    if(key-v[middle]<v[middle+1]-key){
                        return middle;
                    }
                    else if(key-v[middle]>v[middle+1]-key){
                        return middle+1;
                    }
                }
                low = middle+1;
            }
            else return middle;

            /*
            System.out.println("Key: "+key);
            System.out.println("low: v["+low+"]: "+v[low]);
            System.out.println("middle: v["+middle+"]: "+v[middle]);
            System.out.println("high: v["+high+"]: "+v[high]);
            System.out.println("--------------------------------");
            System.out.println("--------------------------------");
            */
        }
        return low;
    }

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);

		int n = in.nextInt();
		int v[] = new int[n];

		for(int i = 0; i<n; i++) v[i] = in.nextInt();

		int k = 0;
		
		for(int i = 0; i<n-1; i++){
			for(int j = i+1; j<n; j++){
				k++;
			}
		}

		int[] somas = new int[k];
		k = 0;
		for(int i = 0; i<n-1; i++){
			for(int j = i+1; j<n; j++){
				somas[k] = v[i]+v[j];
				k++;
			}
		}
		
		Arrays.sort(somas);

		int q = in.nextInt();
		for(int i = 0; i<q; i++){
			int qnum = in.nextInt();
			int a = binarysearch(somas,0,k-1,qnum);
			System.out.println(somas[a]);
		}

	}
}

/---------------------------------------------------------/

[DAA 011] Viagem de mochila às costas

class daa011{

	public static int bsearch(int[] d,int low, int high, int max){
		while(low<high){

			int middle = low+(high-low)/2;

			if(isPossible(d,middle,max)) high = middle;
			else low = middle + 1;
		}
		if(!isPossible(d,low,max)) return -1;
		return low;
	}

	public static boolean isPossible(int[] d, int n, int max){
		int count = 0,sum = 0;
		if(sum+d[0]>n) return false;
		sum += d[0];
		for(int i = 1; i<d.length; i++){

			//if(d[i]>n) return false;

			if(d[i]+sum<=n){
				sum=sum+d[i];
			}
			else{
				count++;
				sum = d[i];
			}
		}
		if(sum<=n) count++;
		if(count<=max) return true;
		else return false;
	}
	
	public static void main(String[] args) {

		Scanner in = new Scanner(System.in);

		int n = in.nextInt();
		int[] d = new int[n];
		int sum = 0;
		int max = 0;

		for(int i = 0; i<n; i++){
			d[i] = in.nextInt();
			if(d[i]>=max) max = d[i];
			sum+=d[i];
		}


		int np = in.nextInt();

		for(int i = 0; i<np; i++){
			int m = in.nextInt();
			System.out.println(bsearch(d,max,sum,m));
		}
	}
}


/---------------------------------------------------------/
/---------------------------------------------------------/

3E - Programação Dinâmica (Recursion with Cache)

- Caracterizar solução optima
- Definir Recursivamente
- Calcular as soluções de todos os subproblemas (trás para a frente)
- Reconstruir a solução optima se necessário

/---------------------------------------------------------/

[DAA 017] Pirâmides

public class daa017{

	public static void count(boolean[][] pir, int n){
		long[][] count = new long[n][n];

		for(int i = 0; i<n; i++){
			for(int j = 0; j<n; j++){
				count[i][j] = 0;
			}
		}

		if(pir[n-1][0] == true){

			count[n-1][0] = 1;

			for(int i = n-2; i>=0; i--){
				for(int j = 0; j<=n-i-1; j++){
					
					//Se for o extremo esquerdo da piramide
					if(j == 0 && pir[i][j] == true){
						count[i][j] += count[i+1][j];
					}
					//Se for o extremo direito
					else if(j == n-i-1 && pir[i][j] == true){
						count[i][j] += count[i+1][j-1];
					}
					//Os restantes
					else if(pir[i][j] == true){
						count[i][j] += count[i+1][j]+count[i+1][j-1];
					}
				}
			}		

			long m = 0;

			for(int i = 0; i<n; i++){
				//System.out.println("i: "+i+" -> "+count[0][i]);
				m += count[0][i]; 
			}

			System.out.println(m);
		}

		else System.out.println(0);

	}

	public static void main(String[] args) {

		Scanner in = new Scanner(System.in);

		int n = in.nextInt();
		int d = in.nextInt();

		boolean[][] pir  = new boolean[n][n];

		for(int i = 0; i<n; i++){
			for(int j = 0; j<=n-1-i; j++){
				pir[i][j] = true;
			}
		}

		for(int i = 0; i<d; i++){
			pir[in.nextInt()-1][in.nextInt()-1] = false;
		}
		/*{
			for(int i = 0; i<n; i++){
				for(int j = 0; j<=n-1-i; j++){
					System.out.print(pir[i][j]+" ");
				}
				System.out.println();
			}
		}*/

		count(pir,n);
	}
}

/---------------------------------------------------------/

[DAA 018] Troco de moedas

public class daa018{

	public static void troco(int[] s, int k){

		int[] coins = new int[k+1];
		int[] used = new int[k+1];
		used[0] = -1;
		Arrays.fill(coins,k+1);
		coins[0] = 0;

		int count = 0;
		
		int first = s[0];
		for(int i = 1; i<=k; i++){
			for(int j = 0; j<s.length; j++){
				if(s[j]<=i && (1 + coins[i-s[j]] < coins[i])){
					coins[i] = Math.min(coins[i-s[j]]+1,coins[i]);
					used[i] = s[j];
				}
			}
		}

		System.out.print(k+": ["+coins[k]+"]");
		int i = k;
		while(i!=0){
			System.out.print(" "+used[i]);
			int temp = i;
			i-=used[temp];
		}	
		System.out.println();
	}

	public static void main(String[] args) {

		Scanner in = new Scanner(System.in);

		int n = in.nextInt();
		int[] c = new int[n];

		for(int i = 0; i<n; i++){
			c[i] = in.nextInt();
		}

		int t = in.nextInt();

		for(int i = 0; i<t; i++){
			troco(c,in.nextInt());
		}
		
	}
}







