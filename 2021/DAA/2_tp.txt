Problema A

-> Algoritmo DFS (Verificar se os grafos são bidirecionais ou não)

public class DFS {
    static int n;              // Numero de nos do grafo
    static boolean adj[][];    // Matriz de adjacencias
    static boolean visited[];  // Que nos ja foram visitados?

    static void dfs(int v) {
    	//System.out.println(v) //imprimir por ordem
		visited[v] = true;
		for (int i=1; i<=n; i++)
		    if (adj[v][i] && !visited[i])
			dfs(i);
	}
}

-> Contar quantidade de componentes conexos
	
	static int conexos(){
		int count = 0;

		for(int i = 1; i<=n; i++){
			if(!visited[i]){
				count++;
				dfs(i);
			}
		}

		return count;
	}

-> Contar o tamanho/peso de componentes conexos

	static int c = 0;

	static int count(){
		int max = 0;

		for(int i = 1; i<=n; i++){
			if(visited[i]) dfs(i);
			max = Math.max(max,c); //Caso seja preciso a maior componente
			c = 0;
		}

		return max;
	}

	static void dfs(int v) {
		c++;
		visited[v] = true;
		for (int i=1; i<=n; i++)
		    if (adj[v][i] && !visited[i])
			dfs(i);
	}

-> daa026
------------------------------------------------------------------------------------------------------------------------------

import java.util.Scanner;
import java.util.Arrays;

class daa026{

	static int rows,cols,c,max,ndirs = 8;
	static String m[];
	static boolean[][] visited;
	static int[] incx = {-1,1,0, 0,-1,-1, 1,1};
	static int[] incy = { 0,0,1,-1,-1, 1,-1,1};

	static int count(){
		int max = 0;

		for(int i = 0; i < rows; i++){
				for(int j = 0;j < cols; j++){
					if(m[i].charAt(j) == '#' && !visited[i][j]){
						dfs(i,j);
						//System.out.println("------------------------------");
					}
					max = Math.max(max,c);
					c = 0;
				}
			}

		return max;
	}

	static void dfs(int y,int x){
		if(y<0 || y>=rows || x<0 || x>=cols) return;
		if(visited[y][x] || m[y].charAt(x) != '#')	return;

		//System.out.println("dfs("+y+","+x+")");
		visited[y][x] = true;
		c++;
		//System.out.println(c);

		for(int i = 0; i<ndirs; i++){
			//System.out.println("y: "+(y+incy[i])+", x: "+(x+incx[i]));
			dfs(y+incy[i],x+incx[i]);
		}
	}

	public static void main(String[] args) {

		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		
		for(int k = 0; k<n; k++){

			rows = in.nextInt();
			cols = in.nextInt();
			m = new String[rows];
			visited = new boolean[rows][cols];

			c = 0;
			max = 0;
			in.nextLine();

			for(int i = 0; i<rows; i++){
				m[i] = in.nextLine();
				//System.out.println(m[i]);
			}

			System.out.println(count());
		
		}
	}
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

-> Verificar se um grafo é bipartido
	
	//Visitar todos os nós até encontrar cores iguais
	//Cores -1 ou 1.

	static boolean bipartido(){
		int c = 1;
		flag = 0;
			for(int i = 1; i<=n; i++){
				
				if(visited[i]==0) dfs(i,c);
				else dfs(i,visited[i]);
				
				if(flag == 1) return false;
				//System.out.println("-------------------------------------");
			}
			return true;
	}


	static void dfs(int v, int c){
		visited[v] = c;
		for(int i = 0; i<=n; i++){
			/*
			System.out.printf("adj[%d][%d]: %b ",v,i,adj[v][i]);
			System.out.printf("| visited[%d]: %d ",v,visited[v]);
			System.out.printf("| visited[%d]: %d\n",i,visited[i]);
			*/
			if(adj[v][i]){
				if(visited[i] == 0){
					visited[i] = -c;
					//System.out.printf("visited[%d]: %d\n",i,visited[i]);
					dfs(i,-c);
				}
				else if(visited[i] == visited[v]){
					flag = 1;
					return;
				}
			}
		}
	}

-> Ordem topológica

	static void topologia() {

		for(int i = 1; i<MAX; i++){
			for(int j = 1; j<MAX; j++){
				if(adj[i][j] && !visited[i]){
					//System.out.println(i);
					dfs(i);
				}
			}
		}
		print();
	
	}

	static void dfs(int v) {
		visited[v] = true;
		int i;
		for(i = 0; i<MAX; i++){
			if(adj[v][i] && !visited[i]) {
				visited[i] = true;
				dfs(i);

			}
		}
		list.addFirst((type)(v));
		size++;
	}

	static void print(){
		for(int i =  0; i<size; i++) {
			System.out.println(list.removeFirst());
		}
	}

Problema B

-> Algoritmo bfs (com cálculo de distâncias e excentricidades, raio e diametro)

import java.util.*;

class Node{

	LinkedList<Integer> adj;
	boolean visited;
	int distance = 0;

	Node(){
		adj = new LinkedList<Integer>();
	}

}

class Graph{
	int n; //Nós do grafo 
	Node[] nodes; //Array de nodes
	int excent;
	int[][]  m; //Matrix com distâncias minimas;

	Graph(int n){
		this.n = n;
		nodes = new Node[n+1];
		m = new int[n+1][n+1];
		
		for(int i = 1; i<=n; i++){
			nodes[i] = new Node();
		}

		for(int i = 0; i<=n; i++)
			for(int j = 0; j<=n; j++) m[i][j] = 0;
	}

	void addLink(int a, int b){
		nodes[a].adj.add(b);
	}

	//A maior das distâncias entre ele próprio e outro qualquer nó
	int excent(int[] l, int v){
		excent = 0;		
		
		for(int i = 1; i<=n; i++){
			if(l[i]>=excent) excent = l[i];
		}

		return excent;
	}

	int getExcent(){return excent;}


	void bfs(int v){
		Queue<Integer> q = new LinkedList<>();
		for(int i = 1; i<=n; i++) nodes[i].visited = false;
		
		q.add(v);
		nodes[v].visited = true;
		nodes[v].distance = 0;
		
		while(!q.isEmpty()){
			int u = q.poll();
			for(int w : nodes[u].adj){
				if(!nodes[w].visited){
					q.add(w);
					
					nodes[w].visited = true;	
					nodes[w].distance = nodes[u].distance + 1;				
					//if(nodes[w].distance == distancia dada, devolver ou guardar o nó w);
					//Guardar a distância na matrix
					m[v][w] = nodes[w].distance;
					//System.out.println("["+v+","+w+"]: "+m[v][w]);
				}
			}
		}
		excent(m[v],v);
		//System.out.println("------------------------");
	}
}

class daa030{

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		
		int n = in.nextInt(); 
		Graph g = new Graph(n);

		int e = in.nextInt();

		for(int i = 0; i<e; i++){
			int a = in.nextInt();
			int b = in.nextInt();
			g.addLink(a,b); g.addLink(b,a);
		}

		int d = 0, r = Integer.MAX_VALUE;
		
		for(int i = 1; i<=n; i++){
			g.bfs(i);
			// De todas as excentricidades a maior
			d = Math.max(g.getExcent(),d);
			// De todas as excentricidades a menor
			r = Math.min(g.getExcent(),r);
		}

		System.out.println(d);
		System.out.println(r);

		int sizec = 0;
		int sizep = 0;

		for(int i = 1; i<=n; i++){
			g.bfs(i);
			if(g.getExcent() == r) sizec++;
			if(g.getExcent() == d) sizep++;
		}
		int[] c = new int[sizec];
		int[] p = new int[sizep];

		sizec = 0;
		sizep = 0;

		for(int i = 1; i<=n; i++){
			g.bfs(i);
			//Nós centrais
			if(g.getExcent() == r) c[sizec++] = i;
			//Nós periféricos
			if(g.getExcent() == d) p[sizep++] = i;
		}

		Arrays.sort(c);
		Arrays.sort(p);

		System.out.print(c[0]);
		for(int i = 1; i<sizec; i++) System.out.print(" "+c[i]);
		System.out.println();

		System.out.print(p[0]);
		for(int i = 1; i<sizep; i++) System.out.print(" "+p[i]);
		System.out.println();
	}
}

-> Calcular nós a uma dada distancia: Fazer pesquisa dfs a partir do nó desejado e com a distância dada, quando chegar ao nó com distância pretendida, guardar ou devolver o nó.

Problema C

-> Algoritmo de Dijkstra

// Exemplo de aplicacao do algoritmo de Dijkstra
// (assumindo um grafo pesado e dirigido, sem pesos negativos)
// (codigo adaptado do codigo em C++ feito na teorica)

import java.util.*;

// Classe que representa uma aresta -> Pair
class Edge {
    int to;     // No destino
    int weight; // Peso da aresta
    
    Edge(int t, int w) {
	to = t;
	weight = w;
    }
}

// Classe que representa um no
class Node {
    public LinkedList<Edge> adj; // Lista de adjacencias
    public boolean visited;      // No ja foi visitado?
    public int distance;         // Distancia ao no origem da pesquisa
    
    Node() {
	adj = new LinkedList<>();
    } 
};

// Classe que representa um no para ficar na fila de prioridade
class NodeQ implements Comparable<NodeQ> {
    public int cost;
    public int node;

    NodeQ(int c, int n) {
	cost = c;
	node = n;
    }

    @Override
    public int compareTo(NodeQ nq) { 
        if (cost < nq.cost) return -1; 
        if (cost > nq.cost) return +1;
	if (node < nq.node) return -1; 
	if (node > nq.node) return +1;
        return 0; 
    } 
}

// Classe que representa um grafo
class Graph {
    int n;          // Numero de nos do grafo
    Node[] nodes;   // Array para conter os nos
    
    Graph(int n) {
	this.n = n;
	nodes = new Node[n+1];  // +1 se os nos comecam em 1 ao inves de 0
	for (int i=1; i<=n; i++)
	    nodes[i] = new Node();
    }
    
    void addLink(int a, int b, int c) {
		nodes[a].adj.add(new Edge(b, c));
    }

    // Algoritmo de Dijkstra
    void dijkstra(int s) {
	
		//Inicializar nos como nao visitados e com distancia infinita
		for (int i=1; i<=n; i++) {
	   		nodes[i].distance = Integer.MAX_VALUE;
	    	nodes[i].visited  = false;
		}
	
		// Inicializar "fila" com no origem
		nodes[s].distance = 0;
		TreeSet<NodeQ> q = new TreeSet<>();
		q.add(new NodeQ(0, s)); // Criar um par (dist=0, no=s)

		// Ciclo principal do Dijkstra
		while (!q.isEmpty()) {
      
	    // Retirar no com menor distancia (o "primeiro" do set, que e uma BST)
	    NodeQ nq = q.pollFirst();
	    int  u = nq.node;
	    nodes[u].visited = true;
	    System.out.println(u + " [dist=" + nodes[u].distance + "]");
	    
	    // Relaxar arestas do no retirado
	    for (Edge e : nodes[u].adj) {
		int v = e.to;
		int cost = e.weight;
		if (!nodes[v].visited && nodes[u].distance + cost < nodes[v].distance) {
		    q.remove(new NodeQ(nodes[v].distance, v)); // Apagar do set
		    nodes[v].distance = nodes[u].distance + cost;
		    q.add(new NodeQ(nodes[v].distance, v));    // Inserir com nova (e menor) distancia
		}
	    }
	}
    }
};


public class dijkstra {
    public static void main(String args[]) {
	Scanner in = new Scanner(System.in);

	Graph g = new Graph(in.nextInt());
	int   e = in.nextInt();
	for (int i=0; i<e; i++) 
	    g.addLink(in.nextInt(), in.nextInt(), in.nextInt());

	// Execucao exemplo a partir do no 1
	g.dijkstra(1);
    }
}


-> FloydWarshall Transitivo

import java.util.*;

// Classe que representa uma aresta
class Edge {
    int to;     // No destino
    int weight; // Peso da aresta
    
    Edge(int t, int w) {
	to = t;
	weight = w;
    }
}

// Classe que representa um no
class Node {
    public LinkedList<Edge> adj; // Lista de adjacencias
    public boolean visited;      // No ja foi visitado?
    public int distance;         // Distancia ao no origem da pesquisa
    
    Node() {
		adj = new LinkedList<>();
    } 
};

// Classe que representa um no para ficar na fila de prioridade
class NodeQ implements Comparable<NodeQ> {
    public int cost;
    public int node;

    NodeQ(int c, int n) {
	cost = c;
	node = n;
    }

    @Override
    public int compareTo(NodeQ nq) { 
        if (cost < nq.cost) return -1; 
        if (cost > nq.cost) return +1;
	if (node < nq.node) return -1; 
	if (node > nq.node) return +1;
        return 0; 
    } 
}

// Classe que representa um grafo
class Graph {
    int n;          // Numero de nos do grafo
    Node[] nodes;   // Array para conter os nos
    int[][] dist;
    int[][] connected;

    Graph(int n) {
		this.n = n;
		nodes = new Node[n+1];  // +1 se os nos comecam em 1 ao inves de 0
		dist = new int[n+1][n+1];
		connected = new int[n+1][n+1];

		for (int i=1; i<=n; i++){
		    nodes[i] = new Node();
			Arrays.fill(dist[i],Integer.MAX_VALUE);
			Arrays.fill(connected[i],0);

    	}

    	for(int i = 1; i<=n; i++){
    		connected[0][i] = i; //Imprimir i+64
    		connected[i][0] = i; //Imprimir i+64
    	}
	}
    
    void addLink(int a, int b, int c) {
		nodes[a].adj.add(new Edge(b, c));
		connected[a][b] = 1;
    }

    void floydwarshall(){
    	//Diagonal igual a 0
    	for(int i = 1; i<=n; i++){
    		dist[i][i] = 0;
    	}

    	nodes[0].distance = 0;
    	TreeSet<NodeQ>q = new TreeSet<>();
    	q.add(new NodeQ(0,0));
    	NodeQ nq = q.pollFirst();
    	int u = nq.node;

    	for(Edge e : nodes[u].adj){
    		int v = e.to;
    		int cost = e.weight;
    		dist[v][u] = cost;
    	}

    	for(int k = 1; k<=n; k++){
    		for(int i = 1; i<=n; i++){
    			for(int j = 1; j<=n; j++){
    				if(dist[i][k] + dist[k][j] < dist[i][j])
    					dist[i][j] = dist[i][k] + dist[k][j];
    			}
    		}
    	}
    }

    void tfloydwarshall() {
    	
    	// 1 - verdadeiro
    	// 0 - falso

    	for(int i = 1; i<=n; i++) {
    		connected[i][i] = 1;
    	}
    	/*
    	for(int i = 1; i<=n; i++){
    		for(Edge e : nodes[i].adj){
    			connected[e.to][i] = 1;
    		}
    	}*/

    	for(int k = 1; k<=n; k++) {
    		for(int i = 1; i<=n; i++) {
    			for(int j = 1; j<=n; j++) {
    				//System.out.printf("(%c,%c) = %d | (%c,%c) = %d\n",i+64,k+64,connected[i][k],k+64,j+64,connected[k][j]);
    				if(connected[i][k] == 1 && connected[k][j] == 1){
    					connected[i][j] = 1;
    					//System.out.printf("-> (%c,%c) = %d\n",i+64,j+64,connected[i][j]);
    				}
    			}
    		}
    	}
    }

    void print() {
		for(int i = 0; i<=n; i++) {
			for(int j = 0; j<=n; j++) {
				if(i == 0 && j!= 0) System.out.printf(" %c",(connected[i][j]+64));
				else if(i!= 0 && j == 0)  System.out.printf("%c",(connected[i][j]+64));
				else if(i == 0 && j == 0) System.out.print(" ");
				else System.out.print(" "+connected[i][j]);
			}
			System.out.println();
		}
	}


}
class daa035{
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		in.nextLine();
		Graph g = new Graph(n);

		for(int i = 0; i<n; i++){
			
			String str = in.nextLine();
			int a = str.charAt(0)-64;

			String numberOnly = str.replaceAll("[^0-9]", "");
			int k = Integer.parseInt(numberOnly);

			//System.out.println(k);
			int j = 4;
			if(k>=10) j = 5;
			
			while(j<=(2*(k+1))){
				g.addLink(a,(str.charAt(j)-64),0);
				//System.out.printf((i+1)+": Added Link: (%d,%c)\n",(a),(str.charAt(j)));
				j+=2;
			}
		}

		//g.print();
		//System.out.println();
		g.tfloydwarshall();
		g.print();
	}
}

